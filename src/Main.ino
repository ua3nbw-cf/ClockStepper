// Clock Stepper
// -*- mode: C++ -*-
//
// Copyright (C) 2019 ua3nbw

//Энкодер на пинах А0, А1. Используется внутренняя подтяжка.
//кнопка энкодера на D3
//11-dinamic // A4, A5 - I2C PCF2129 //

//#include <Squawk.h>
#include <FaBoRTC_PCF2129.h>
#include <AccelStepper.h>
#include <MultiStepper.h>
#include "LowPower.h" // подключение библиотеки для энергосбережения
#include "Encoder.h"
#include <PCM.h>

const unsigned char sample[] PROGMEM = {
	130, 127, 126, 128, 128, 127, 127, 128, 128, 127, 127, 127, 127, 128, 127, 127, 127, 127, 127, 128, 128, 127, 127, 126, 127, 127, 126, 127, 128, 128, 127, 127, 128, 127, 127, 127, 128, 127, 127, 128, 127, 127, 127, 126, 127, 127, 127, 127, 127, 127, 127, 127, 128, 128, 127, 127, 128, 127, 126, 126, 128, 126, 126, 129, 129, 128, 127, 125, 129, 126, 124, 127, 126, 128, 129, 129, 129, 127, 127, 127, 128, 126, 125, 128, 129, 127, 127, 128, 126, 126, 128, 128, 126, 126, 128, 128, 127, 128, 128, 125, 128, 129, 126, 126, 127, 128, 126, 126, 130, 128, 126, 128, 128, 126, 126, 128, 129, 127, 127, 127, 126, 127, 128, 127, 126, 127, 127, 128, 128, 127, 127, 128, 128, 128, 127, 127, 127, 127, 127, 126, 127, 127, 127, 128, 127, 127, 126, 127, 129, 128, 127, 127, 128, 126, 127, 128, 127, 127, 127, 128, 127, 126, 129, 128, 127, 128, 127, 127, 127, 128, 128, 127, 128, 128, 128, 128, 127, 126, 126, 127, 126, 128, 128, 126, 126, 127, 128, 127, 127, 127, 126, 128, 128, 126, 128, 127, 128, 128, 126, 127, 128, 127, 127, 127, 126, 127, 128, 128, 127, 127, 128, 126, 127, 128, 127, 127, 127, 128, 128, 126, 128, 127, 126, 127, 128, 127, 127, 127, 127, 127, 127, 128, 127, 127, 127, 127, 127, 126, 127, 127, 127, 127, 127, 127, 127, 127, 127, 126, 126, 126, 126, 127, 127, 128, 127, 127, 128, 128, 128, 127, 127, 127, 127, 127, 127, 127, 127, 126, 127, 127, 127, 127, 127, 127, 127, 128, 129, 128, 127, 128, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 128, 128, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 128, 127, 127, 127, 127, 127, 127, 127, 127, 127, 128, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 128, 127, 127, 128, 128, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 128, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 128, 127, 127, 127, 128, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 128, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 128, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 128, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 128, 127, 127, 127, 127, 127, 127, 128, 127, 127, 128, 127, 127, 127, 127, 127, 127, 128, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 128, 127, 127, 127, 127, 127, 127, 127, 127, 127, 128, 127, 127, 127, 127, 127, 127, 127, 127, 127, 128, 127, 127, 128, 127, 127, 127, 127, 128, 127, 128, 128, 127, 127, 127, 127, 127, 127, 128, 127, 127, 128, 127, 127, 128, 127, 127, 127, 127, 127, 127, 128, 128, 127, 128, 127, 127, 127, 127, 127, 127, 127, 128, 127, 127, 127, 127, 127, 127, 127, 127, 128, 128, 127, 127, 127, 128, 127, 128, 128, 127, 127, 128, 127, 128, 127, 128, 127, 127, 127, 127, 128, 128, 127, 128, 127, 127, 127, 128, 128, 127, 127, 128, 127, 127, 128, 128, 127, 127, 127, 127, 127, 128, 128, 127, 127, 127, 127, 128, 127, 127, 127, 127, 128, 128, 128, 128, 127, 126, 128, 128, 127, 127, 127, 127, 127, 127, 128, 128, 128, 127, 127, 127, 126, 128, 129, 128, 127, 127, 128, 127, 128, 129, 126, 128, 129, 127, 127, 126, 126, 128, 129, 128, 126, 127, 127, 127, 128, 128, 127, 127, 127, 127, 126, 127, 127, 128, 128, 127, 127, 127, 128, 128, 126, 127, 128, 127, 127, 129, 127, 127, 127, 126, 126, 127, 128, 128, 127, 127, 127, 127, 127, 127, 128, 127, 127, 128, 127, 126, 128, 128, 129, 128, 127, 127, 127, 127, 127, 127, 128, 127, 127, 127, 128, 128, 128, 128, 127, 127, 129, 127, 127, 129, 127, 128, 128, 127, 126, 127, 129, 128, 128, 128, 127, 127, 125, 127, 127, 127, 128, 129, 127, 126, 127, 128, 126, 127, 127, 128, 128, 128, 127, 127, 129, 128, 127, 127, 126, 129, 128, 127, 127, 126, 129, 127, 127, 127, 126, 127, 129, 127, 126, 126, 127, 127, 127, 126, 128, 125, 127, 128, 130, 127, 126, 126, 125, 129, 127, 127, 127, 127, 127, 129, 126, 126, 127, 130, 127, 125, 128, 129, 127, 131, 128, 130, 123, 128, 130, 129, 124, 128, 130, 125, 130, 127, 123, 132, 125, 131, 126, 126, 131, 118, 131, 137, 84, 118, 173, 138, 123, 100, 151, 108, 71, 175, 159, 120, 159, 138, 165, 131, 66, 86, 167, 213, 119, 77, 144, 121, 122, 158, 164, 164, 126, 125, 105, 77, 103, 102, 174, 177, 120, 75, 99, 143, 105, 136, 176, 173, 95, 132, 163, 133, 127, 96, 80, 151, 127, 95, 101, 126, 161, 97, 115, 174, 155, 105, 86, 132, 166, 130, 125, 126, 154, 118, 87, 138, 117, 151, 103, 141, 139, 61, 93, 130, 178, 159, 129, 110, 120, 124, 106, 92, 147, 153, 154, 130, 121, 134, 37, 104, 183, 167, 110, 69, 116, 172, 135, 93, 124, 193, 115, 77, 114, 122, 153, 53, 152, 172, 136, 94, 79, 167, 162, 111, 142, 161, 118, 87, 114, 155, 114, 113, 121, 140, 136, 63, 119, 151, 187, 173, 91, 115, 127, 93, 103, 154, 179, 94, 88, 110, 138, 167, 62, 165, 169, 176, 92, 60, 147, 173, 141, 136, 131, 128, 85, 87, 135, 152, 114, 72, 160, 175, 100, 112, 127, 148, 126, 92, 176, 139, 86, 106, 134, 169, 131, 120, 91, 137, 163, 49, 140, 140, 184, 132, 112, 150, 114, 96, 128, 166, 167, 86, 53, 100, 170, 137, 74, 131, 161, 156, 111, 94, 152, 155, 109, 184, 140, 97, 73, 83, 183, 148, 112, 93, 146, 131, 87, 185, 123, 175, 135, 119, 165, 125, 99, 70, 121, 181, 142, 91, 98, 143, 119, 98, 143, 158, 150, 103, 124, 179, 134, 74, 132, 151, 194, 104, 23, 140, 149, 154, 116, 159, 140, 92, 115, 102, 196, 88, 101, 183, 138, 117, 77, 121, 166, 150, 121, 120, 119, 85, 96, 166, 181, 146, 87, 108, 166, 142, 124, 108, 120, 177, 116, 78, 145, 95, 130, 112, 174, 180, 124, 89, 102, 211, 107, 104, 114, 149, 184, 63, 70, 146, 127, 114, 156, 173, 119, 96, 145, 171, 159, 105, 121, 149, 106, 101, 92, 152, 152, 102, 117, 151, 70, 112, 95, 181, 193, 134, 105, 84, 152, 113, 162, 105, 127, 145, 66, 129, 167, 142, 125, 98, 158, 174, 87, 50, 135, 191, 113, 109, 140, 132, 118, 111, 169, 130, 103, 129, 164, 117, 120, 52, 160, 171, 133, 136, 116, 153, 73, 129, 127, 175, 110, 69, 156, 129, 121, 131, 114, 179, 176, 126, 100, 111, 138, 133, 139, 127, 137, 85, 41, 128, 182, 155, 108, 134, 167, 168, 76, 147, 126, 136, 129, 105, 150, 71, 107, 119, 187, 111, 76, 131, 128, 148, 113, 128, 203, 143, 112, 133, 133, 114, 76, 106, 149, 166, 96, 91, 129, 138, 144, 136, 133, 156, 141, 66, 119, 117, 154, 105, 123, 199, 114, 87, 77, 163, 169, 144, 121, 95, 129, 93, 123, 179, 121, 121, 116, 147, 142, 68, 105, 163, 165, 98, 115, 112, 116, 114, 113, 156, 174, 126, 101, 151, 122, 141, 81, 111, 154, 117, 117, 70, 120, 169, 143, 133, 147, 177, 87, 83, 143, 150, 156, 81, 141, 147, 85, 83, 93, 152, 154, 159, 129, 144, 102, 106, 180, 187, 129, 88, 107, 117, 129, 58, 134, 169, 125, 121, 110, 158, 149, 119, 158, 150, 155, 93, 83, 102, 136, 153, 67, 144, 147, 134, 105, 97, 167, 139, 119, 115, 169, 129, 98, 99, 135, 166, 120, 105, 150, 147, 77, 146, 138, 127, 126, 118, 164, 116, 70, 127, 172, 194, 116, 101, 119, 125, 110, 87, 176, 122, 129, 113, 117, 163, 130, 131, 114, 155, 138, 106, 78, 138, 179, 114, 88, 136, 129, 100, 129, 118, 186, 138, 99, 167, 151, 117, 108, 118, 159, 116, 91, 105, 124, 95, 83, 172, 144, 138, 89, 161, 195, 96, 104, 133, 170, 128, 103, 87, 111, 122, 119, 126, 154, 140, 112, 90, 128, 218, 121, 122, 164, 131, 118, 75, 90, 165, 139, 108, 119, 145, 115, 94, 141, 148, 161, 78, 133, 157, 127, 135, 122, 177, 133, 84, 104, 152, 113, 83, 131, 188, 131, 88, 105, 163, 172, 83, 137, 141, 148, 158, 82, 112, 146, 90, 103, 131, 154, 129, 112, 119, 157, 191, 97, 140, 131, 128, 98, 82, 164, 145, 119, 103, 119, 113, 105, 122, 181, 174, 130, 100, 154, 165, 81, 122, 145, 160, 92, 47, 162, 136, 69, 119, 143, 167, 123, 116, 138, 189, 165, 89, 142, 97, 143, 109, 94, 138, 114, 109, 99, 139, 143, 111, 93, 138, 153, 157, 132, 143, 149, 112, 107, 95, 161, 120, 69, 135, 112, 114, 106, 132, 209, 114, 82, 129, 176, 121, 116, 174, 117, 143, 61, 106, 154, 120, 120, 110, 150, 154, 116, 90, 132, 163, 166, 117, 126, 137, 111, 101, 110, 159, 110, 89, 128, 129, 173, 113, 117, 180, 131, 135, 110, 148, 131, 105, 105, 133, 167, 49, 130, 159, 108, 102, 124, 194, 158, 104, 117, 144, 129, 122, 125, 145, 128, 107, 92, 109, 169, 145, 98, 98, 131, 167, 98, 143, 187, 151, 160, 106, 131, 95, 92, 98, 132, 160, 78, 103, 91, 158, 156, 105, 179, 165, 113, 125, 161, 148, 89, 92, 146, 135, 79, 89, 148, 146, 94, 104, 144, 154, 149, 98, 143, 135, 134, 147, 103, 166, 107, 83, 73, 135, 160, 118, 139, 97, 153, 129, 127, 164, 128, 136, 118, 101, 143, 123, 85, 118, 157, 120, 90, 114, 146, 144, 131, 166, 175, 104, 54, 156, 146, 119, 105, 126, 181, 90, 117, 109, 146, 127, 103, 123, 121, 179, 113, 129, 152, 142, 143, 109, 128, 149, 98, 94, 106, 116, 144, 142, 113, 126, 153, 127, 142, 177, 159, 98, 107, 114, 155, 86, 101, 163, 95, 115, 97, 172, 118, 99, 157, 184, 172, 78, 133, 151, 148, 122, 90, 121, 111, 75, 111, 135, 165, 146, 104, 128, 156, 139, 119, 148, 137, 142, 139, 114, 88, 138, 85, 103, 114, 118, 174, 104, 180, 144, 122, 109, 145, 170, 92, 108, 103, 140, 117, 116, 168, 126, 81, 108, 141, 165, 103, 102, 155, 159, 130, 101, 115, 140, 156, 107, 113, 135, 122, 58, 135, 127, 135, 153, 82, 157, 116, 170, 151, 132, 143, 114, 116, 84, 140, 117, 102, 124, 127, 128, 91, 117, 176, 127, 125, 150, 176, 156, 107, 121, 128, 83, 76, 153, 154, 114, 71, 128, 133, 185, 122, 88, 201, 128, 151, 117, 147, 149, 101, 111, 97, 113, 88, 119, 123, 138, 180, 138, 127, 140, 135, 150, 118, 152, 143, 84, 99, 142, 131, 106, 117, 142, 145, 94, 132, 150, 169, 86, 127, 174, 89, 138, 101, 159, 156, 85, 97, 145, 167, 88, 78, 119, 163, 150, 112, 156, 135, 115, 134, 116, 147, 128, 121, 118, 110, 121, 123, 94, 115, 146, 122, 132, 133, 172, 116, 138, 154, 144, 126, 39, 153, 146, 82, 117, 139, 133, 90, 106, 144, 169, 130, 104, 170, 155, 137, 95, 117, 180, 87, 58, 97, 143, 127, 115, 121, 150, 142, 144, 162, 124, 141, 118, 138, 113, 138, 132, 76, 125, 97, 125, 126, 116, 175, 135, 101, 142, 172, 112, 101, 157, 141, 151, 89, 123, 152, 97, 109, 110, 157, 131, 95, 115, 192, 150, 101, 116, 145, 146, 78, 132, 155, 157, 101, 101, 129, 103, 154, 121, 103, 135, 131, 154, 137, 134, 139, 126, 104, 127, 174, 75, 121, 150, 122, 100, 96, 171, 125, 97, 117, 172, 150, 138, 130, 161, 149, 78, 101, 122, 147, 81, 94, 151, 159, 111, 70, 172, 187, 122, 139, 141, 148, 111, 103, 118, 117, 126, 89, 129, 78, 144, 171, 115, 144, 122, 134, 119, 159, 160, 121, 84, 139, 144, 87, 93, 117, 136, 87, 114, 146, 168, 136, 101, 158, 155, 134, 116, 118, 180, 97, 69, 125, 162, 124, 54, 132, 125, 152, 97, 127, 184, 129, 161, 133, 122, 115, 137, 130, 131, 132, 140, 107, 82, 126, 114, 113, 134, 170, 118, 98, 164, 164, 158, 112, 112, 155, 92, 122, 108, 129, 133, 78, 124, 141, 173, 81, 134, 183, 144, 126, 92, 173, 146, 70, 91, 148, 127, 116, 114, 124, 129, 123, 141, 127, 137, 148, 151, 125, 119, 162, 103, 112, 139, 93, 121, 81, 143, 138, 106, 154, 148, 158, 98, 132, 141, 167, 152, 94, 144, 121, 90, 105, 126, 148, 107, 66, 157, 190, 123, 109, 160, 166, 107, 101, 132, 145, 134, 95, 135, 109, 105, 152, 76, 129, 127, 135, 138, 119, 157, 127, 138, 127, 145, 117, 106, 143, 110, 99, 101, 107, 151, 115, 101, 153, 156, 149, 118, 122, 161, 150, 96, 112, 144, 97, 57, 157, 168, 134, 85, 81, 194, 115, 127, 150, 145, 148, 129, 138, 109, 132, 123, 114, 103, 105, 135, 122, 121, 152, 112, 136, 153, 132, 148, 134, 134, 148, 132, 95, 114, 126, 108, 86, 111, 118, 177, 115, 111, 200, 127, 137, 111, 162, 148, 88, 118, 161, 135, 57, 107, 148, 143, 122, 105, 116, 142, 136, 168, 138, 132, 148, 116, 121, 125, 122, 123, 122, 95, 102, 115, 125, 123, 164, 107, 161, 176, 128, 168, 90, 142, 138, 111, 87, 114, 143, 98, 96, 119, 158, 107, 91, 165, 176, 105, 125, 155, 164, 107, 90, 137, 136, 114, 106, 108, 124, 151, 121, 104, 109, 134, 118, 187, 127, 124, 157, 94, 163, 112, 115, 111, 116, 102, 93, 125, 124, 166, 142, 117, 143, 156, 146, 115, 110, 170, 124, 77, 111, 156, 111, 79, 127, 164, 129, 95, 150, 172, 141, 102, 156, 125, 164, 123, 84, 156, 95, 127, 94, 99, 113, 128, 153, 135, 151, 125, 156, 178, 126, 121, 108, 121, 138, 105, 116, 100, 116, 114, 108, 112, 164, 177, 117, 118, 167, 166, 96, 126, 139, 155, 56, 99, 170, 96, 131, 94, 147, 146, 106, 116, 129, 164, 128, 140, 142, 132, 156, 113, 128, 118, 96, 129, 118, 128, 101, 126, 140, 137, 120, 122, 152, 153, 141, 126, 117, 95, 153, 94, 108, 129, 135, 131, 40, 167, 182, 115, 114, 135, 175, 125, 132, 153, 139, 111, 63, 124, 120, 102, 106, 103, 151, 132, 138, 133, 154, 158, 141, 132, 125, 121, 116, 128, 119, 104, 69, 146, 125, 112, 128, 106, 179, 146, 166, 143, 103, 179, 128, 85, 102, 142, 126, 62, 135, 154, 134, 86, 98, 177, 144, 135, 138, 156, 130, 109, 137, 159, 132, 99, 98, 111, 140, 113, 114, 99, 135, 123, 116, 177, 120, 148, 149, 141, 149, 79, 137, 147, 120, 119, 93, 112, 116, 153, 100, 96, 159, 146, 133, 113, 167, 172, 115, 115, 158, 132, 85, 83, 126, 147, 102, 111, 124, 156, 136, 139, 163, 122, 148, 107, 135, 175, 108, 114, 79, 110, 126, 98, 141, 126, 120, 129, 180, 156, 121, 145, 126, 135, 119, 99, 106, 119, 131, 119, 72, 116, 174, 135, 114, 136, 173, 131, 114, 137, 142, 139, 81, 132, 145, 92, 113, 80, 140, 147, 108, 129, 126, 154, 134, 144, 154, 153, 114, 95, 154, 127, 107, 130, 116, 98, 118, 130, 148, 116, 97, 131, 130, 154, 152, 131, 127, 156, 156, 86, 118, 140, 122, 106, 62, 153, 143, 104, 129, 135, 160, 118, 133, 148, 163, 130, 113, 139, 113, 110, 84, 102, 149, 122, 98, 156, 145, 126, 143, 152, 168, 124, 122, 132, 113, 108, 117, 138, 89, 104, 134, 108, 181, 142, 120, 131, 140, 191, 133, 110, 118, 148, 103, 83, 122, 132, 123, 80, 116, 142, 131, 139, 160, 150, 161, 123, 115, 160, 117, 91, 106, 141, 122, 95, 125, 124, 128, 112, 123, 166, 94, 137, 151, 121, 157, 128, 152, 127, 128, 118, 106, 103, 103, 115, 89, 131, 170, 142, 87, 104, 147, 170, 142, 162, 177, 121, 95, 69, 94, 127, 129, 127, 145, 148, 93, 90, 141, 126, 165, 158, 184, 179, 73, 82, 70, 105, 119, 171, 193, 135, 108, 66, 83, 108, 165, 219, 206, 158, 117, 35, 41, 109, 161, 194, 166, 159, 92, 15, 44, 131, 216, 229, 194, 154, 80, 58, 29, 110, 197, 191, 190, 107, 74, 22, 42, 115, 208, 238, 178, 166, 79, 21, 54, 140, 221, 225, 179, 126, 29, 18, 74, 137, 226, 221, 174, 92, 27, 51, 86, 165, 238, 231, 185, 62, 46, 55, 79, 171, 195, 222, 143, 56, 21, 62, 143, 199, 233, 198, 152, 52, 12, 82, 138, 180, 204, 176, 99, 13, 36, 102, 150, 219, 225, 182, 102, 24, 50, 104, 175, 231, 191, 147, 41, 18, 50, 96, 224, 227, 188, 118, 52, 40, 69, 163, 219, 228, 165, 75, 31, 34, 90, 151, 214, 234, 157, 60, 29, 72, 133, 196, 247, 214, 106, 41, 30, 76, 136, 193, 236, 160, 89, 29, 43, 110, 157, 243, 218, 151, 88, 35, 60, 117, 203, 217, 183, 131, 34, 17, 55, 142, 229, 225, 167, 88, 43, 59, 105, 176, 240, 213, 139, 46, 29, 52, 85, 180, 230, 215, 117, 66, 54, 58, 130, 203, 255, 212, 131, 73, 34, 58, 120, 196, 205, 155, 114, 37, 33, 61, 108, 192, 220, 221, 174, 111, 93, 98, 117, 160, 156, 156, 107, 58, 51, 52, 126, 143, 161, 175, 171, 141, 101, 138, 150, 130, 125, 129, 125, 104, 96, 107, 109, 103, 115, 159, 145, 140, 151, 139, 145, 128, 132, 132, 124, 132, 134, 109, 110, 92, 107, 138, 142, 150, 116, 140, 125, 122, 130, 120, 144, 139, 145, 115, 93, 121, 118, 109, 139, 160, 155, 120, 112, 121, 131, 122, 141, 174, 131, 106, 103, 105, 108, 137, 160, 160, 115, 101, 107, 106, 135, 143, 166, 146, 148, 115, 98, 120, 113, 148, 153, 151, 118, 83, 106, 126, 139, 165, 143, 128, 122, 123, 111, 117, 156, 155, 147, 105, 109, 122, 95, 97, 145, 144, 136, 125, 122, 128, 101, 135, 151, 155, 129, 142, 134, 96, 114, 109, 130, 129, 120, 119, 118, 134, 138, 131, 149, 134, 123, 135, 140, 124, 109, 122, 106, 119, 119, 106, 121, 140, 152, 161, 117, 120, 146, 123, 129, 126, 153, 124, 104, 106, 124, 126, 93, 140, 133, 113, 132, 136, 134, 127, 137, 150, 133, 132, 121, 116, 117, 111, 112, 125, 149, 127, 119, 126, 123, 126, 142, 139, 155, 138, 122, 137, 115, 132, 122, 118, 113, 129, 140, 109, 123, 129, 151, 133, 109, 153, 137, 112, 129, 140, 140, 113, 125, 123, 113, 118, 124, 131, 122, 137, 144, 142, 139, 125, 123, 148, 125, 118, 122, 114, 128, 102, 113, 132, 138, 135, 128, 138, 120, 131, 137, 129, 148, 124, 126, 114, 110, 145, 123, 108, 119, 146, 127, 111, 133, 139, 128, 124, 140, 140, 119, 120, 131, 114, 127, 114, 119, 129, 108, 130, 136, 131, 122, 117, 138, 138, 141, 126, 129, 147, 109, 122, 120, 124, 129, 107, 128, 125, 123, 124, 124, 115, 130, 144, 131, 130, 153, 147, 109, 111, 132, 138, 104, 120, 123, 106, 122, 123, 142, 141, 128, 144, 140, 137, 122, 129, 138, 116, 137, 116, 129, 120, 92, 129, 131, 136, 124, 129, 146, 144, 127, 126, 131, 123, 123, 130, 132, 122, 126, 109, 107, 122, 145, 140, 114, 144, 149, 117, 117, 130, 143, 125, 117, 125, 114, 125, 113, 139, 128, 113, 141, 130, 145, 123, 123, 138, 135, 132, 126, 132, 121, 108, 110, 130, 142, 132, 115, 133, 126, 118, 120, 127, 146, 134, 137, 134, 116, 131, 127, 112, 125, 137, 130, 89, 110, 130, 128, 133, 126, 153, 130, 124, 133, 134, 136, 131, 132, 123, 111, 102, 119, 126, 121, 120, 135, 132, 136, 120, 121, 152, 134, 133, 133, 139, 128, 98, 113, 129, 124, 126, 119, 127, 118, 129, 132, 120, 157, 142, 130, 117, 124, 129, 108, 116, 140, 143, 115, 110, 113, 127, 131, 138, 142, 143, 122, 120, 131, 113, 123, 118, 129, 132, 110, 118, 131, 135, 127, 113, 141, 137, 126, 122, 132, 146, 110, 131, 134, 133, 131, 116, 117, 116, 130, 125, 121, 124, 141, 128, 116, 133, 147, 129, 124, 130, 132, 134, 108, 120, 129, 117, 120, 119, 127, 131, 127, 148, 136, 131, 122, 128, 147, 126, 129, 117, 135, 118, 89, 119, 137, 129, 121, 135, 134, 127, 125, 136, 143, 138, 133, 127, 114, 126, 128, 103, 117, 127, 124, 122, 114, 135, 138, 126, 140, 143, 147, 118, 115, 122, 115, 127, 117, 131, 124, 116, 125, 125, 131, 124, 125, 142, 140, 109, 112, 137, 135, 120, 122, 132, 129, 112, 118, 139, 129, 127, 131, 114, 130, 128, 125, 136, 132, 144, 118, 115, 119, 126, 128, 110, 134, 127, 121, 120, 122, 139, 131, 128, 133, 135, 132, 132, 129, 129, 126, 112, 121, 132, 116, 112, 129, 138, 127, 118, 132, 157, 124, 121, 140, 128, 133, 117, 129, 124, 122, 118, 106, 124, 120, 132, 131, 131, 148, 137, 131, 133, 133, 128, 116, 118, 129, 127, 116, 119, 120, 121, 132, 130, 136, 144, 131, 123, 136, 125, 124, 123, 130, 137, 99, 118, 136, 130, 115, 121, 145, 122, 122, 124, 132, 141, 125, 127, 129, 125, 125, 118, 121, 126, 127, 125, 123, 127, 131, 126, 119, 132, 133, 127, 134, 138, 129, 130, 112, 112, 132, 119, 132, 119, 126, 126, 113, 135, 140, 138, 116, 136, 142, 114, 123, 137, 138, 124, 109, 123, 124, 110, 114, 127, 137, 136, 131, 128, 137, 133, 130, 129, 128, 131, 133, 114, 117, 120, 106, 127, 120, 135, 133, 126, 137, 130, 142, 129, 128, 133, 132, 128, 111, 125, 130, 113, 128, 134, 121, 110, 120, 144, 136, 126, 132, 141, 126, 117, 124, 134, 133, 121, 115, 129, 125, 118, 131, 118, 138, 128, 119, 130, 129, 142, 128, 132, 129, 121, 126, 119, 125, 123, 123, 131, 122, 132, 129, 114, 125, 134, 131, 124, 133, 137, 127, 117, 125, 127, 114, 119, 143, 135, 118, 118, 121, 147, 126, 127, 140, 128, 130, 116, 126, 129, 127, 124, 113, 127, 124, 120, 128, 127, 141, 130, 133, 139, 127, 131, 130, 123, 122, 129, 122, 121, 127, 125, 116, 118, 131, 141, 131, 129, 148, 123, 123, 129, 129, 134, 113, 126, 132, 119, 112, 116, 141, 129, 121, 126, 127, 141, 128, 135, 137, 130, 128, 118, 126, 133, 123, 117, 125, 123, 124, 130, 130, 123, 129, 128, 125, 135, 129, 142, 123, 126, 137, 113, 120, 125, 131, 126, 116, 133, 129, 128, 127, 135, 141, 116, 126, 134, 131, 122, 116, 132, 133, 119, 118, 124, 129, 135, 127, 128, 135, 131, 118, 129, 135, 120, 129, 120, 130, 129, 119, 127, 112, 120, 133, 127, 134, 133, 138, 124, 128, 140, 128, 131, 121, 132, 125, 111, 125, 130, 121, 119, 125, 129, 127, 122, 141, 150, 135, 124, 128, 128, 124, 125, 114, 134, 131, 114, 125, 123, 134, 127, 123, 137, 127, 134, 133, 136, 134, 128, 132, 115, 125, 123, 123, 125, 119, 125, 126, 123, 134, 136, 121, 128, 135, 140, 134, 128, 127, 123, 111, 115, 140, 125, 120, 133, 127, 137, 124, 119, 138, 135, 134, 120, 127, 132, 124, 124, 122, 133, 117, 122, 131, 127, 132, 134, 132, 132, 128, 125, 130, 121, 132, 134, 126, 123, 125, 121, 119, 127, 123, 128, 123, 128, 150, 130, 128, 139, 126, 130, 122, 132, 125, 116, 117, 122, 138, 123, 120, 119, 131, 136, 124, 131, 144, 135, 127, 130, 123, 128, 124, 130, 130, 121, 117, 120, 120, 120, 137, 131, 131, 136, 128, 138, 129, 127, 142, 120, 121, 122, 121, 118, 125, 137, 122, 125, 123, 135, 136, 127, 135, 137, 129, 124, 123, 130, 132, 114, 114, 131, 137, 129, 124, 126, 130, 126, 122, 135, 131, 121, 132, 125, 128, 135, 126, 134, 120, 123, 127, 117, 122, 129, 138, 122, 130, 132, 125, 129, 130, 134, 128, 122, 128, 126, 116, 124, 130, 131, 130, 123, 128, 137, 128, 121, 136, 137, 128, 123, 120, 141, 129, 112, 127, 122, 129, 126, 124, 130, 123, 131, 131, 139, 131, 134, 133, 117, 126, 131, 126, 122, 124, 125, 122, 120, 131, 132, 128, 135, 137, 129, 131, 135, 131, 130, 121, 114, 128, 116, 116, 129, 134, 146, 123, 120, 135, 131, 128, 124, 138, 133, 124, 120, 124, 132, 122, 124, 128, 120, 126, 132, 125, 125, 127, 133, 129, 127, 135, 134, 124, 125, 132, 125, 127, 135, 117, 122, 120, 122, 139, 124, 129, 128, 125, 129, 125, 137, 135, 129, 118, 124, 136, 120, 118, 127, 136, 132, 116, 123, 134, 130, 132, 136, 133, 126, 125, 124, 123, 125, 129, 129, 120, 117, 132, 123, 126, 139, 127, 137, 129, 131, 137, 125, 131, 124, 122, 116, 122, 129, 126, 128, 125, 134, 137, 125, 132, 136, 129, 124, 125, 138, 136, 117, 113, 129, 127, 119, 124, 132, 130, 129, 125, 132, 128, 123, 143, 124, 127, 132, 123, 128, 121, 130, 126, 124, 122, 121, 127, 128, 133, 131, 124, 129, 125, 130, 134, 129, 135, 130, 121, 120, 124, 126, 125, 119, 126, 134, 129, 119, 134, 136, 123, 124, 122, 147, 131, 121, 129, 117, 124, 126, 127, 124, 124, 130, 126, 129, 133, 133, 134, 126, 130, 125, 122, 128, 122, 123, 127, 123, 124, 126, 124, 136, 139, 134, 128, 132, 126, 127, 127, 120, 139, 122, 116, 122, 125, 138, 120, 125, 138, 131, 125, 128, 139, 132, 125, 127, 122, 128, 125, 127, 124, 118, 128, 130, 127, 130, 127, 126, 132, 127, 130, 134, 132, 127, 127, 126, 126, 137, 120, 128, 125, 119, 131, 118, 126, 131, 132, 132, 123, 129, 132, 128, 125, 134, 141, 119, 114, 124, 126, 126, 121, 127, 127, 122, 126, 132, 130, 136, 131, 123, 125, 123, 126, 128, 129, 117, 127, 123, 123, 131, 121, 135, 131, 127, 135, 128, 133, 126, 122, 124, 124, 129, 124, 125, 121, 127, 133, 121, 129, 140, 134, 126, 129, 136, 132, 117, 126, 133, 124, 122, 120, 124, 127, 135, 125, 132, 133, 121, 133, 126, 131, 137, 126, 130, 120, 123, 128, 129, 129, 122, 124, 123, 127, 127, 128, 134, 129, 126, 132, 129, 132, 136, 122, 121, 127, 132, 124, 115, 127, 127, 119, 118, 137, 134, 124, 130, 126, 138, 132, 119, 130, 125, 127, 123, 121, 125, 126, 129, 128, 128, 122, 123, 130, 132, 133, 134, 130, 127, 119, 117, 132, 126, 125, 125, 123, 129, 126, 130, 128, 130, 132, 131, 126, 124, 144, 128, 113, 124, 120, 125, 118, 123, 135, 128, 127, 127, 136, 134, 126, 127, 127, 133, 127, 126, 127, 124, 124, 124, 121, 126, 125, 129, 135, 125, 126, 128, 131, 128, 131, 134, 132, 128, 118, 127, 130, 124, 132, 117, 109, 123, 129, 132, 129, 140, 140, 128, 129, 135, 138, 129, 123, 123, 126, 122, 118, 119, 133, 125, 121, 127, 128, 138, 129, 128, 129, 132, 131, 129, 133, 117, 118, 120, 119, 124, 116, 129, 130, 123, 131, 126, 132, 135, 138, 132, 128, 130, 118, 114, 118, 127, 121, 114, 123, 139, 133, 128, 134, 134, 134, 123, 124, 135, 131, 124, 120, 123, 116, 118, 118, 124, 137, 128, 134, 131, 128, 132, 125, 135, 131, 127, 132, 136, 127, 120, 124, 123, 123, 125, 122, 126, 131, 129, 130, 128, 131, 134, 122, 126, 137, 131, 122, 117, 128, 131, 123, 115, 128, 138, 126, 130, 127, 130, 129, 118, 134, 132, 129, 129, 126, 124, 123, 119, 125, 130, 126, 121, 128, 126, 120, 132, 135, 136, 127, 118, 126, 127, 127, 126, 125, 133, 129, 121, 118, 130, 130, 126, 132, 131, 142, 132, 115, 127, 125, 127, 120, 124, 129, 126, 121, 124, 126, 123, 132, 134, 135, 131, 126, 122, 129, 126, 123, 130, 122, 118, 122, 124, 131, 124, 126, 133, 133, 128, 128, 135, 130, 139, 123, 112, 125, 121, 133, 123, 120, 128, 125, 120, 125, 136, 135, 130, 127, 136, 135, 123, 121, 130, 123, 123, 126, 121, 132, 129, 125, 134, 130, 128, 126, 134, 134, 127, 130, 127, 130, 116, 130, 130, 115, 127, 119, 133, 131, 118, 124, 129, 132, 132, 132, 128, 136, 136, 123, 122, 122, 129, 128, 119, 128, 135, 118, 121, 133, 128, 132, 122, 122, 128, 130, 130, 129, 136, 127, 127, 114, 118, 124, 112, 133, 136, 129, 137, 129, 124, 118, 118, 132, 135, 129, 130, 138, 131, 120, 114, 114, 125, 129, 131, 141, 136, 142, 141, 111, 118, 123, 121, 118, 122, 136, 131, 133, 118, 125, 121, 112, 129, 130, 151, 151, 131, 137, 123, 108, 111, 118, 124, 126, 138, 138, 135, 122, 119, 124, 110, 118, 135, 146, 152, 145, 136, 133, 104, 92, 102, 113, 137, 149, 150, 131, 132, 119, 106, 108, 119, 144, 150, 156, 163, 136, 119, 98, 84, 113, 122, 128, 151, 162, 139, 114, 111, 102, 110, 118, 138, 161, 148, 150, 144, 112, 100, 85, 98, 122, 134, 160, 164, 149, 113, 115, 104, 103, 128, 132, 155, 163, 143, 120, 97, 94, 105, 104, 127, 152, 159, 158, 145, 120, 111, 110, 99, 115, 148, 152, 144, 127, 120, 116, 89, 111, 129, 134, 152, 153, 155, 131, 119, 108, 110, 108, 121, 164, 151, 135, 133, 115, 100, 95, 102, 135, 146, 154, 148, 130, 127, 127, 111, 110, 130, 136, 139, 148, 130, 127, 124, 98, 105, 105, 139, 154, 140, 149, 143, 126, 101, 114, 124, 130, 144, 137, 144, 121, 107, 112, 102, 108, 134, 145, 150, 148, 145, 134, 111, 106, 120, 121, 129, 147, 136, 124, 126, 106, 89, 121, 129, 153, 147, 141, 151, 137, 128, 105, 105, 118, 127, 125, 131, 152, 124, 110, 112, 110, 131, 131, 143, 167, 149, 124, 122, 111, 100, 109, 129, 140, 140, 134, 139, 125, 109, 118, 123, 115, 141, 138, 149, 154, 122, 109, 104, 116, 119, 129, 138, 147, 141, 123, 119, 110, 111, 130, 119, 138, 163, 155, 138, 115, 106, 113, 105, 116, 144, 154, 141, 128, 124, 111, 112, 117, 135, 145, 139, 160, 137, 120, 123, 101, 107, 110, 123, 131, 148, 144, 130, 123, 110, 111, 104, 118, 172, 173, 158, 134, 101, 95, 101, 95, 110, 143, 150, 156, 135, 131, 124, 100, 85, 128, 162, 156, 157, 135, 123, 101, 83, 118, 121, 120, 145, 160, 142, 124, 128, 114, 116, 117, 120, 146, 144, 149, 140, 138, 136, 94, 88, 118, 149, 155, 160, 148, 132, 98, 90, 104, 137, 148, 153, 152, 130, 131, 105, 98, 102, 111, 136, 132, 137, 155, 136, 116, 118, 119, 97, 117, 136, 132, 143, 131, 137, 115, 87, 105, 122, 139, 157, 162, 148, 152, 120, 107, 113, 116, 120, 134, 148, 140, 138, 100, 103, 113, 116, 138, 144, 149, 156, 142, 138, 121, 118, 114, 110, 109, 130, 158, 127, 133, 125, 111, 109, 111, 140, 149, 154, 158, 143, 113, 102, 95, 104, 114, 127, 145, 159, 147, 111, 116, 104, 104, 109, 124, 152, 154, 144, 147, 136, 118, 105, 104, 118, 133, 137, 130, 147, 139, 154, 137, 109, 113, 114, 116, 124, 141, 155, 151, 131, 130, 109, 99, 110, 115, 114, 122, 139, 126, 133, 128, 130, 152, 139, 126, 127, 134, 141, 125, 115, 114, 108, 102, 113, 135, 130, 146, 132, 142, 148, 124, 129, 127, 124, 134, 135, 116, 119, 125, 126, 108, 106, 122, 127, 127, 135, 158, 144, 139, 142, 120, 120, 114, 114, 126, 127, 137, 140, 139, 118, 112, 117, 118, 124, 111, 140, 147, 140, 138, 118, 129, 128, 116, 125, 134, 126, 131, 134, 134, 122, 111, 114, 121, 139, 145, 141, 130, 136, 144, 111, 111, 123, 123, 136, 135, 144, 136, 125, 116, 123, 126, 114, 130, 126, 137, 136, 126, 139, 122, 116, 132, 127, 123, 117, 114, 134, 134, 126, 127, 130, 127, 120, 129, 132, 130, 123, 108, 120, 113, 119, 131, 122, 141, 142, 128, 114, 130, 135, 127, 132, 121, 133, 129, 125, 132, 121, 126, 121, 115, 138, 132, 132, 142, 134, 132, 126, 128, 126, 120, 128,
};

#define COUNT_NOTES 14
int  frequences[COUNT_NOTES] = {392, 392, 392, 392, 0, 392, 392, 392, 392, 0, 392, 392, 392, 392};
int  durations[COUNT_NOTES]  = {60, 60, 70, 70, 0, 60, 60, 70, 70, 0, 60, 60, 70, 70};
int  delays[COUNT_NOTES]  = {100, 100, 120, 120, 450, 100, 100, 120, 120, 450, 100, 100, 120, 120};

//noTone(11);


//tone(11, 1000, 1000);
// 	tone(11, frequences[i], durations[i]);
// #define COUNT_NOTES 14
// int  frequences[COUNT_NOTES] = {329, 392, 392, 329, 440, 392, 440, 392, 440, 392, 440, 392, 440, 493};
// int  durations[COUNT_NOTES]  = {300, 600, 300, 600, 300, 300, 300, 300, 300, 300, 300, 300, 300, 600 };
// int  delays[COUNT_NOTES]  = {300, 1200, 300, 1200, 300, 300, 300, 300, 300, 300, 300, 300, 300, 600 };
int tonePin = 11;

// A2, A3, A6, A7,  13

// EG X-Y position bed driven by 2 steppers
// Alas its not possible to build an array of these with different pins for each :-(
AccelStepper stepper1(AccelStepper::FULL4WIRE, 7, 4, 5, 6); //часы
AccelStepper stepper2(AccelStepper::FULL4WIRE,  12, 8, 9, 10); //минуты

//AccelStepper stepper1(AccelStepper::FULL4WIRE, 11, 8, 9, 10); //часы
//AccelStepper stepper2(AccelStepper::FULL4WIRE,  7, 4, 5, 6); //минуты

// Up to 10 steppers can be handled as a group by MultiStepper
MultiStepper steppers;
long positions[2]; // Array of desired stepper positions

int led = 13;

volatile boolean flag_int_PCF2129 = false;
//uint32_t ts;
int8_t i = 1;
FaBoRTC_PCF2129 faboRTC;

int old_hour;
int old_min;

void setup() {
	Serial.begin(9600); // открываем серийный порт для дебаггинга
	while (!Serial) {
		delay(1);
	}

	//delay(1000);
	Wire.begin();// A4, A5 - I2C

	Serial.println(F("Starting ..."));
	Serial.println("Checking I2C device...");

	if (faboRTC.searchDevice()) {
		Serial.println("configuring FaBo RTC I2C Brick");
		faboRTC.configure();
	}
	else {
		Serial.println("device not found");
		while (1);
	}

	//Serial.println("set time");
	//faboRTC.setTime(12, 59, 0);
	//faboRTC.set1_sec(); //Second interrupt  enabled (default Minute interrupt enabled)
	//faboRTC.set24mode(); //Set to 24 hour mode (default Set to 12 hour mode)
	faboRTC.set12mode();

	pinMode(led, OUTPUT);              // порт как выход
	EncoderInit();//Инициализация энкодера

	// Configure each stepper
	stepper1.setMaxSpeed(500); stepper2.setMaxSpeed(500);

	// Then give them to MultiStepper to manage
	steppers.addStepper(stepper1); steppers.addStepper(stepper2);

	MultiStepers (360, 600); // Blocks until all are in position

	Time now = faboRTC.now();

	Serial.print("Time: "); Serial.print(now.hour()); Serial.print(":");
	Serial.print(now.minute()); Serial.print(":");
	Serial.print(now.second()); Serial.println();

	old_hour = now.hour();
	old_min = now.minute();



	//button = false;

	MultiStepers ((now.hour() * 30) + (now.minute() / 2) - 15, now.minute() * 10); //установит время с PCF2129 после reset
}

boolean flag_Dong = true;


void loop() {
	byte count = 0;    // счетчик нажатий кнопки энкодера

	// Деактивировать занятые пины и установить их в LOW.
	// Снимает напряжение с обмоток двигателя, экономя энергию (вал при это может проворачиваться под внешними нагрузками)
	stepper1.disableOutputs();  stepper2.disableOutputs(); //

	attachInterrupt(0, int_PCF2129, FALLING); // привязываем 0-е прерывание к функции int_PCF2129().
	LowPower.powerDown(SLEEP_FOREVER, ADC_OFF, BOD_OFF); // переход в режим сна

	if (flag_int_PCF2129) { //если прерывание от PCF2129


		//Serial.print("Time hour -");Serial.print("   stepper1.currentPosition -"); Serial.println(stepper1.currentPosition());
		//Serial.print("Time min -"); Serial.print("    stepper2.currentPosition -"); Serial.println(stepper2.currentPosition());
		//Serial.println(".");

		int step_hour = stepper1.currentPosition();
		int step_min = stepper2.currentPosition();


		step_min = step_min + 10;//к текущему абсолютному положение (в шагах) прибавляем минуту, в шагах это +10.

		if ( !i-- ) {
			++step_hour;
			i = 1;
		} // пропуск каждого второго прерывания SkipEverySecond

		//if ((step_min / 10 & 1) == 1) {++step_hour;} //	Проверка на чётность // пропуск каждого второго прерывания


		//Serial.print("---------------    currentPosition hour -");Serial.println(hour);
		//   if (step_min == 600) { step_min = 0; }

		step_min = (step_min == 600) ? 0 : step_min;//if (step_min == 600) { step_min = 0; }
		step_hour = (step_hour > 360) ? 0 : step_hour;//if (step_hour == 360) { step_hour = 0; }



		//MultiStepers (step_hour, step_min); //stepper1 часы, stepper2 минуты


		// Begin playback of melody.
		//Squawk.play(TheOriginalSquawk);
		//tone(11, 1000, 1000);
		// 	tone(11, frequences[i], durations[i]);
		//midi();

		for (int i = 0; i < COUNT_NOTES; i++)
		{
			tone(11, frequences[i], durations[i]);
			delay(delays[i]);
		}


		// Serial.print("Time hour -"); Serial.print("   stepper1.currentPosition -"); Serial.println(stepper1.currentPosition());
		// Serial.print("Time min -"); Serial.print("    stepper2.currentPosition -"); Serial.println(stepper2.currentPosition());
		// Serial.println(".");


		Time now = faboRTC.now();
		MultiStepers ((now.hour() * 30) + (now.minute() / 2) - 15, now.minute() * 10); //каждую минуту установит время с PCF2129

		Serial.print("Time: "); Serial.print(now.hour()); Serial.print(":");
		Serial.print(now.minute()); Serial.print(":");
		Serial.print(now.second()); Serial.println();


		Serial.print("old_hour -"); Serial.println(old_hour);
		Serial.print("old_min -"); Serial.println(old_min);

		int new_hour = now.hour();
		int new_min = now.minute();

		Serial.print("now hour -"); Serial.print(new_hour); Serial.print("   currentPosition hour -"); Serial.println(step_hour);
		Serial.print("now min -"); Serial.print(new_min); Serial.print("    currentPosition min -"); Serial.println(step_min);


		Serial.println(".");




		if (((new_min == 15) || (new_min == 30) || (new_min == 45)) && flag_Dong)
		{
			startPlayback(sample, sizeof(sample));
			delay(2000);
			stopPlayback();

		}

		if (((new_hour != old_hour)) && flag_Dong)
		{
			for (int n = 0; n < new_hour; ++n)
			{
				startPlayback(sample, sizeof(sample));
				delay(2000);
				stopPlayback();
			}
			old_hour = new_hour;
		}


		digitalWrite(led, HIGH);// индикация импульсов с PCF2129 при срабатовании прерывания
		flag_int_PCF2129 = false;


		delay(100);

		//Squawk.stop();
		digitalWrite(led, LOW);

	}

	detachInterrupt(0); // запрет прерываний
	//==================================================================================================
	if (button ) { // установка времени энкодером и запись в PCF2129 при клике кнопки энкодера
		stepper1.setMaxSpeed(360); stepper2.setMaxSpeed(360);
		detachInterrupt(1); // запрет прерываний
		for ( ; ; ) {
			static uint32_t pushmillis = 0;
			if (digitalRead(3) == LOW) // если нажата кнопка
			{
				pushmillis = millis();
				count++;
				delay(100);
			}

			if (pushmillis && millis() - pushmillis > 500)

			{
				switch (count) {
				case 1:
					//выполняется, когда count равно 1
					Serial.print("    Alarm OFF");
					attachInterrupt(1, int_click, LOW); // привязываем 1-е прерывание к функции int_click().
					break;
				case 2:
					//выполняется когда  count равно 2
					Serial.print("    Alarm ON");
					attachInterrupt(1, int_click, LOW); // привязываем 1-е прерывание к функции int_click().
					break;
				case 3:
					//выполняется когда  count равно 3
					Serial.print("    TimeSet");
					attachInterrupt(1, int_click, LOW); // привязываем 1-е прерывание к функции int_click().
					Set_Time();
					break;
				case 4:
					//выполняется когда  count равно 4
					Serial.print("    AlarmSet");
					attachInterrupt(1, int_click, LOW); // привязываем 1-е прерывание к функции int_click().
					Set_Alarm();
					break;
				case 5:
					//выполняется когда  count равно 5
					Serial.print("    DongON - DongOFF");
					flag_Dong = !flag_Dong;
					attachInterrupt(1, int_click, LOW); // привязываем 1-е прерывание к функции int_click().
					break;
				default:
					attachInterrupt(1, int_click, LOW);
					Serial.print("    default");
					break;
					// выполняется, если не выбрана ни одна альтернатива
					// default необязателен
				}

				count = 0;
				pushmillis = 0;
			}

			Serial.print("--------------------------------break -"); Serial.println(count);
			delay(100);
			if (count == 0) {break;}
		}

		// EncoderValue = old_hour;
		// TimeSet(1, 12);
		// uint8_t sethour = EncoderValue;
		// EncoderValue = old_min;
		// TimeSet(0, 59);
		// uint8_t setmin = EncoderValue;

		// Serial.print("   record hour -"); Serial.println(sethour);
		// Serial.print("    record  min -"); Serial.println(setmin);
		// Serial.println(".");

		// faboRTC.setTime(sethour, setmin, 00); // запись в PCF2129
		// delay(100);

		// stepper1.setMaxSpeed(500); stepper2.setMaxSpeed(500);
		// MultiStepers (0, 0); // Blocks until all are in position
		// Time now = faboRTC.now();
		// MultiStepers ((now.hour() * 30) + (now.minute() / 2) - 15, now.minute() * 10); //установит время с PCF2129
		//resetFunc(); //вызываем reset

	}

	button = false;
}
//-----------------------------------------------------------------------------------------------
void Set_Alarm() {
	EncoderValue = old_hour;
	TimeSet(1, 12);
	uint8_t sethour = EncoderValue;
	EncoderValue = old_min;
	TimeSet(0, 59);
	uint8_t setmin = EncoderValue;

	Serial.print("   record hour -"); Serial.println(sethour);
	Serial.print("    record  min -"); Serial.println(setmin);
	Serial.println(".");

	//faboRTC.setTime(sethour, setmin, 00); // запись в PCF2129
	delay(100);

	stepper1.setMaxSpeed(500); stepper2.setMaxSpeed(500);
	MultiStepers (0, 0); // Blocks until all are in position
	Time now = faboRTC.now();
	MultiStepers ((now.hour() * 30) + (now.minute() / 2) - 15, now.minute() * 10); //установит время с PCF2129
	//button = false;
}

//-----------------------------------------------------------------------------------------------
void AlarmSet(uint8_t posmin, uint8_t posmax) { //пределы установки минут и часов

	button = !button;  // меняем значение на противоположное
	Serial.println("--------------------set time---------------------");
	for ( ; ; ) {

		EncoderValue = (EncoderValue < posmin) ? posmin : EncoderValue;//if (EncoderValue < posmin)  { EncoderValue = posmin; }
		EncoderValue = (EncoderValue > posmax) ? posmax : EncoderValue;//if (EncoderValue > posmax)  { EncoderValue = posmax; }


		if ((EncoderValue != newpos) && !((EncoderValue < posmin) || (EncoderValue > posmax)  )) {

			Serial.print("EncoderValue --   "); Serial.println(EncoderValue);

			if (posmin) { positions[0] = (EncoderValue * 30) - 15; } //часы
			else { positions[1] = (EncoderValue * 10); } //минуты

			//delay(10);
			MultiStepers (positions[0], positions[1]);
			newpos = EncoderValue;
		}

		//delay(10);
		if (button) { break; } //выход из цикла при следующем клике
	}

}
//-----------------------------------------------------------------------------------------------
void Set_Time() {
	EncoderValue = old_hour;
	TimeSet(1, 12);
	uint8_t sethour = EncoderValue;
	EncoderValue = old_min;
	TimeSet(0, 59);
	uint8_t setmin = EncoderValue;

	Serial.print("   record hour -"); Serial.println(sethour);
	Serial.print("    record  min -"); Serial.println(setmin);
	Serial.println(".");

	faboRTC.setTime(sethour, setmin, 00); // запись в PCF2129
	delay(100);

	stepper1.setMaxSpeed(500); stepper2.setMaxSpeed(500);
	MultiStepers (0, 0); // Blocks until all are in position
	Time now = faboRTC.now();
	MultiStepers ((now.hour() * 30) + (now.minute() / 2) - 15, now.minute() * 10); //установит время с PCF2129
	//button = false;
}

//-----------------------------------------------------------------------------------------------
void TimeSet(uint8_t posmin, uint8_t posmax) { //пределы установки минут и часов

	button = !button;  // меняем значение на противоположное
	Serial.println("--------------------set time---------------------");
	for ( ; ; ) {

		EncoderValue = (EncoderValue < posmin) ? posmin : EncoderValue;//if (EncoderValue < posmin)  { EncoderValue = posmin; }
		EncoderValue = (EncoderValue > posmax) ? posmax : EncoderValue;//if (EncoderValue > posmax)  { EncoderValue = posmax; }


		if ((EncoderValue != newpos) && !((EncoderValue < posmin) || (EncoderValue > posmax)  )) {

			Serial.print("EncoderValue --   "); Serial.println(EncoderValue);

			if (posmin) { positions[0] = (EncoderValue * 30) - 15; } //часы
			else { positions[1] = (EncoderValue * 10); } //минуты

			//delay(10);
			MultiStepers (positions[0], positions[1]);
			newpos = EncoderValue;
		}

		//delay(10);
		if (button) { break; } //выход из цикла при следующем клике
	}

}

//-----------------------------------------------------------------------------------------------
void MultiStepers(uint16_t newPossHour, uint16_t newPossMin) {
	positions[0] = newPossHour;  positions[1] = newPossMin;
	steppers.moveTo(positions);
	steppers.runSpeedToPosition(); // Blocks until all are in position
	delay(1);
}


//-----------------------------------------------------------------------------------------------
void int_PCF2129() {
	flag_int_PCF2129 = true;   //

}

